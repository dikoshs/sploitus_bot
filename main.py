import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
# from aiogram.fsm import FSMContext, State, StatesGroup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
from api_handler import ApiHandler
import constants, re
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

load_dotenv(override=True)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="8061759215:AAEM8PfKVJiE4zCnqpQqqti8PCi1GBdg9Rg")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


class MyStates(StatesGroup):
    started = State()  # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    beginning_to_observe = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ IP –∏–ª–∏ –¥–æ–º–µ–Ω–∞
    observing = State()
    finish = State()  # –ó–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.set_state(MyStates.started)
    
    # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    commands_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π! ‚ò∫\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/observe - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ–º–µ–Ω –∏–ª–∏ IP\n"
        "/getall - –≤—Å–µ —ç–∫—Å–ø–ª–æ–π—Ç—ã –∏ PoC –ø–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º\n\n"
        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
        "/getmy - –≤—ã–≤–µ—Å—Ç–∏ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫. "
        "–ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥–æ–º–µ–Ω—É. üòÅ\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, /observe."
    )
    
    await message.answer(commands_text)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /observe
@dp.message(Command("observe"))
async def cmd_observe(message: types.Message, state: FSMContext):
    await state.set_state(MyStates.beginning_to_observe)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –∏–ª–∏ ip –∞–¥—Ä–µ—Å —Ä–µ—Å—É—Ä—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /observe
@dp.message(Command("getall"))
async def cmd_observe(message: types.Message, state: FSMContext):
    await state.set_state(MyStates.beginning_to_observe)
    await message.answer("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –∏ PoC")

    api_handler = ApiHandler()
    vuln_details = api_handler.get_all_vulns()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    if vuln_details:
        message_response = ""
        for vuln in vuln_details:
            message_response += f"**{vuln['vuln_title']} (ID: {vuln['id']})**\n"
            message_response += f"Request: {vuln['request']}\n"
            message_response += f"Vuln Date: {vuln['vuln_date']}\n"
            message_response += f"Vuln Indicator: {vuln['vulnerability_indicator']}\n"
            message_response += f"Description: {vuln['description'][:300]}...\n"  # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            message_response += f"[More Info]({vuln['description'].split('http')[1]})\n"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
            message_response += "--------------------------\n"

        await message.answer(message_response)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏.")

@dp.message(Command("getmy"))
async def cmd_get_my(message: types.Message, state: FSMContext):
    await state.set_state(MyStates.beginning_to_observe)
    await message.answer("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –±–æ—Ç–∞")

    api_handler = ApiHandler()
    all_vulns = api_handler.get_my_vulnerabilities()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    inline_buttons = []

    for vuln in all_vulns:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        # print("VULN: ", vuln)
        button = InlineKeyboardButton(
            text=f"{vuln['request']}",  # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            callback_data=f"vuln_{vuln['id']}_{vuln['request']}"  # –ü–µ—Ä–µ–¥–∞–µ–º id –∏ request
        )
        inline_buttons.append([button])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ —Å–ø–∏—Å–æ–∫

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:", reply_markup=keyboard)

MAX_MESSAGE_LENGTH = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

def split_message(text, max_length=MAX_MESSAGE_LENGTH):
    # –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length
    parts = []
    while len(text) > max_length:
        split_index = text.rfind('\n', 0, max_length)
        if split_index == -1:  # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ max_length —Å–∏–º–≤–æ–ª–æ–≤
            split_index = max_length
        parts.append(text[:split_index])
        text = text[split_index:]
    parts.append(text)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    return parts

@dp.callback_query(lambda c: c.data.startswith('vuln_'))
async def handle_vuln_callback(callback_query: types.CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    vuln_data = callback_query.data.split('_')
    # print("DATTAAAAA:", vuln_data)
    vuln_id = vuln_data[1]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    api_handler = ApiHandler()
    vuln_details = api_handler.get_all_vuln_by_id(int(vuln_id))

    if vuln_details:
        message = ""
        for vuln in vuln_details:
            message += f"**{vuln['vuln_title']} (ID: {vuln['id']})**\n"
            message += f"Request: {vuln['request']}\n"
            message += f"Vuln Date: {vuln['vuln_date']}\n"
            message += f"Vuln Indicator: {vuln['vulnerability_indicator']}\n"
            message += f"Description: {vuln['description'][:300]}...\n"
            if 'http' in vuln['description']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏
                message += f"[More Info](http{vuln['description'].split('http')[1]})\n"
            message += "--------------------------\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏
        for part in split_message(message):
            await callback_query.message.answer(part, parse_mode="Markdown")
    else:
        await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏.")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    await callback_query.answer()


# –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–º–µ–Ω–∞ –∏–ª–∏ IP
@dp.message(MyStates.beginning_to_observe)
async def process_resource(message: types.Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Å—É—Ä—Å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    resource = message.text.strip()

    # –ï—Å–ª–∏ —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞
    if not resource:
        await message.answer("–†–µ—Å—É—Ä—Å –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –¥–æ–º–µ–Ω–∞ –∏–ª–∏ IP.")
        return

    # –ü—Ä–∏–º–µ—Ä: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–º–µ–Ω –∏–ª–∏ IP
    api_handler = ApiHandler()

    if re.match(constants.domain_regex, resource):
        resource_type = "–¥–æ–º–µ–Ω"
    elif re.match(constants.ipv4_regex, resource):
        resource_type = "IPv4"
    elif re.match(constants.ipv6_regex, resource):
        resource_type = "IPv6"
    else:
        await message.answer(f"–†–µ—Å—É—Ä—Å {resource} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ–º–µ–Ω, IPv4 –∏–ª–∏ IPv6.")
        return

    # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    result = api_handler.scan_vulns(resource)

    if result == True:
        await message.answer(f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–∞ ({resource_type}) {resource} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
    elif result == "Unauthorized":
        await message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await state.set_state(MyStates.finish)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
